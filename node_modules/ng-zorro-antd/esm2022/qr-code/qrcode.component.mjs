/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { isPlatformBrowser } from '@angular/common';
import { ChangeDetectionStrategy, Component, Input, ViewChild, Output, EventEmitter, Inject, PLATFORM_ID } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { drawCanvas, plotQRCodeData } from './qrcode';
import * as i0 from "@angular/core";
import * as i1 from "ng-zorro-antd/i18n";
import * as i2 from "ng-zorro-antd/spin";
import * as i3 from "@angular/common";
import * as i4 from "ng-zorro-antd/button";
import * as i5 from "ng-zorro-antd/core/transition-patch";
import * as i6 from "ng-zorro-antd/icon";
class NzQRCodeComponent {
    constructor(i18n, cdr, platformId) {
        this.i18n = i18n;
        this.cdr = cdr;
        this.platformId = platformId;
        this.nzValue = '';
        this.nzColor = '#000000';
        this.nzSize = 160;
        this.nzIcon = '';
        this.nzIconSize = 40;
        this.nzBordered = true;
        this.nzStatus = 'active';
        this.nzLevel = 'M';
        this.nzRefresh = new EventEmitter();
        // https://github.com/angular/universal-starter/issues/538#issuecomment-365518693
        // canvas is not supported by the SSR DOM
        this.isBrowser = true;
        this.destroy$ = new Subject();
        this.isBrowser = isPlatformBrowser(this.platformId);
        this.cdr.markForCheck();
    }
    ngOnInit() {
        this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.locale = this.i18n.getLocaleData('QRCode');
            this.cdr.markForCheck();
        });
    }
    ngOnChanges(changes) {
        const { nzValue, nzIcon, nzLevel, nzSize, nzIconSize, nzColor } = changes;
        if ((nzValue || nzIcon || nzLevel || nzSize || nzIconSize || nzColor) && this.canvas) {
            this.drawCanvasQRCode();
        }
    }
    ngAfterViewInit() {
        this.drawCanvasQRCode();
    }
    reloadQRCode() {
        this.drawCanvasQRCode();
        this.nzRefresh.emit('refresh');
    }
    drawCanvasQRCode() {
        if (this.canvas) {
            drawCanvas(this.canvas.nativeElement, plotQRCodeData(this.nzValue, this.nzLevel), this.nzSize, 10, this.nzColor, this.nzIconSize, this.nzIcon);
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: NzQRCodeComponent, deps: [{ token: i1.NzI18nService }, { token: i0.ChangeDetectorRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.3", type: NzQRCodeComponent, selector: "nz-qrcode", inputs: { nzValue: "nzValue", nzColor: "nzColor", nzSize: "nzSize", nzIcon: "nzIcon", nzIconSize: "nzIconSize", nzBordered: "nzBordered", nzStatus: "nzStatus", nzLevel: "nzLevel" }, outputs: { nzRefresh: "nzRefresh" }, host: { properties: { "class.ant-qrcode-border": "nzBordered" }, classAttribute: "ant-qrcode" }, viewQueries: [{ propertyName: "canvas", first: true, predicate: ["canvas"], descendants: true }], exportAs: ["nzQRCode"], usesOnChanges: true, ngImport: i0, template: `
    <div class="ant-qrcode-mask" *ngIf="nzStatus !== 'active'">
      <nz-spin *ngIf="nzStatus === 'loading'"></nz-spin>
      <div *ngIf="nzStatus === 'expired'">
        <p class="ant-qrcode-expired">{{ locale.expired }}</p>
        <button nz-button nzType="link" (click)="reloadQRCode()">
          <span nz-icon nzType="reload" nzTheme="outline"></span>
          <span>{{ locale.refresh }}</span>
        </button>
      </div>
    </div>
    <ng-container *ngIf="isBrowser">
      <canvas #canvas></canvas>
    </ng-container>
  `, isInline: true, dependencies: [{ kind: "component", type: i2.NzSpinComponent, selector: "nz-spin", inputs: ["nzIndicator", "nzSize", "nzTip", "nzDelay", "nzSimple", "nzSpinning"], exportAs: ["nzSpin"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.NzButtonComponent, selector: "button[nz-button], a[nz-button]", inputs: ["nzBlock", "nzGhost", "nzSearch", "nzLoading", "nzDanger", "disabled", "tabIndex", "nzType", "nzShape", "nzSize"], exportAs: ["nzButton"] }, { kind: "directive", type: i5.ɵNzTransitionPatchDirective, selector: "[nz-button], nz-button-group, [nz-icon], [nz-menu-item], [nz-submenu], nz-select-top-control, nz-select-placeholder, nz-input-group", inputs: ["hidden"] }, { kind: "directive", type: i6.NzIconDirective, selector: "[nz-icon]", inputs: ["nzSpin", "nzRotate", "nzType", "nzTheme", "nzTwotoneColor", "nzIconfont"], exportAs: ["nzIcon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { NzQRCodeComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.3", ngImport: i0, type: NzQRCodeComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'nz-qrcode',
                    exportAs: 'nzQRCode',
                    template: `
    <div class="ant-qrcode-mask" *ngIf="nzStatus !== 'active'">
      <nz-spin *ngIf="nzStatus === 'loading'"></nz-spin>
      <div *ngIf="nzStatus === 'expired'">
        <p class="ant-qrcode-expired">{{ locale.expired }}</p>
        <button nz-button nzType="link" (click)="reloadQRCode()">
          <span nz-icon nzType="reload" nzTheme="outline"></span>
          <span>{{ locale.refresh }}</span>
        </button>
      </div>
    </div>
    <ng-container *ngIf="isBrowser">
      <canvas #canvas></canvas>
    </ng-container>
  `,
                    host: {
                        class: 'ant-qrcode',
                        '[class.ant-qrcode-border]': `nzBordered`
                    }
                }]
        }], ctorParameters: function () { return [{ type: i1.NzI18nService }, { type: i0.ChangeDetectorRef }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { canvas: [{
                type: ViewChild,
                args: ['canvas', { static: false }]
            }], nzValue: [{
                type: Input
            }], nzColor: [{
                type: Input
            }], nzSize: [{
                type: Input
            }], nzIcon: [{
                type: Input
            }], nzIconSize: [{
                type: Input
            }], nzBordered: [{
                type: Input
            }], nzStatus: [{
                type: Input
            }], nzLevel: [{
                type: Input
            }], nzRefresh: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,